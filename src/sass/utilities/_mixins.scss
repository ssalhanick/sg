// Mixin to make adding an overlay to a background image easy.
// Colors are in hex only (for now). Opacity is between 0 and 1. URL should be wrapped in quotes

@mixin bg-overlay($url, $color, $opacity) {
    background: linear-gradient(to right, rgba($color, $opacity), rgba($color, $opacity)), url($url);
  }


//NEED TO MAKE LIST VARIABLES IN THE SCOPE OF THE FILE YOU ARE CREATING
@mixin gradient($direction, $list) { 
  background: -webkit-linear-gradient($direction, $list);
  background: -moz-linear-gradient($direction, $list);
  background: -o-linear-gradient($direction, $list);
  background: linear-gradient($direction, $list);  
}

//Multicolumn
@mixin split($columns, $gap) {	
	// Number of columns
	-webkit-column-count: $columns;
	-moz-column-count: $columns;
	-o-column-count: $columns;
	-o-column-count: $columns;	
	// Gap size
	-webkit-column-gap: $gap;
	-moz-column-gap: $gap;
	-o-column-gap: $gap;
	column-gap: $gap;
}

  // Multicolumn @mixin - This doesnt work because prefixr isn't a mixin we have. it may be something built into burbon, or compass, but since we don't want to mess with ruby on rails, we're really trying to avoid those mixin libraries.
  @mixin col-cstm($col-width: 250px, $col-count: 0, $col-gap: 20px, $col-rule: false) {
    $base-unit-type: 1px;
    $base-unit-size: 1;
    $base-unit: $base-unit-type * $base-unit-size !default;
    @include prefixr(column-width, $col-width, webkit moz cstm);
    @if type-of($col-count) == number and unitless($col-count) {
      @include prefixr(column-count, $col-count, webkit moz cstm);
    }
    @else if type-of($col-count) == number and not unit($base-unit) != px {
      @include prefixr(column-count, 2, webkit moz cstm);
      $col-count: $col-gap;
    }
    @else if type-of($col-count) == number and not unitless($col-count) or length($col-count) > 1 {
      @include prefixr(column-count, 2, webkit moz cstm);
      $col-rule-coords: $col-count;
        $width: nth($col-rule-coords, 1);
        $style: nth($col-rule-coords, 2);
        $color: nth($col-rule-coords, 3);
        @include prefixr(column-rule, $width $style $color, webkit moz cstm);
    }
    @if length($col-gap) > 1 {
      @include prefixr(column-gap, 20px, webkit moz cstm);
      $col-rule-coords: $col-gap;
        $width: nth($col-rule-coords, 1);
        $style: nth($col-rule-coords, 2);
        $color: nth($col-rule-coords, 3);
        @include prefixr(column-rule, $width $style $color, webkit moz cstm);
    }
    @else if length($col-gap) == 1 {
      @include prefixr(column-gap, $col-gap, webkit moz cstm);
    }
    @if $col-rule != false {
      $col-rule-coords: $col-rule;
        $width: nth($col-rule-coords, 1);
        $style: nth($col-rule-coords, 2);
        $color: nth($col-rule-coords, 3);
        @include prefixr(column-rule, $width $style $color, webkit moz cstm);
    }
  }


//Keyframe mixin
@mixin keyframes($name){
	@-webkit-keyframes #{$name}{
		@content;}
	@-moz-keyframes #{$name}{
		@content;}
	@-ms-keyframes #{$name}{
		@content;}
	@keyframes #{$name}{
		@content;}
	}


//Bootstrap Breakpoints
@import 'breakpoints';
//Specific Browser Hacks
@import 'hacks';
//Accessibility Mixins
@import 'accessibility';